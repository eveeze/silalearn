generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  fullName        String
  hashedPassword  String
  email           String      @unique
  role            Role        @default(USER)
  sessions        Session[]
  createdAt       DateTime    @default(now())
  quizResults     QuizResult[]
  courses         Course[]    @relation("UserCourses")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  expires   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String   @unique
  description String?  @db.VarChar(3000)
  videoUrl    String?  // Menyimpan URL video dari YouTube
  createdAt   DateTime @default(now())
  admin       User     @relation("UserCourses", fields: [adminId], references: [id])
  adminId     String
}

model Quiz {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  questions   Question[]
  quizResults QuizResult[]
}

model QuizResult {
  id         Int      @id @default(autoincrement())
  score      Float    // Menyimpan nilai siswa
  duration   Int      // Menyimpan waktu yang diperlukan oleh siswa untuk menyelesaikan kuis (dalam detik)
  startedAt  DateTime // Waktu mulai mengerjakan kuis
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Siswa yang mengerjakan kuis
  userId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade) // Kuis yang sedang dikerjakan
  quizId     Int
}

model Question {
  id         Int      @id @default(autoincrement())
  content    String
  options    Option[]
  type       QuestionType
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId     Int
}

model Option {
  id         Int      @id @default(autoincrement())
  content    String
  isCorrect  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

enum Role {
  USER
  ADMIN
}

enum QuestionType {
  REGULAR
  HOTS
}
